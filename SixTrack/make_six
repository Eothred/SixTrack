#!/bin/sh
#
# Version 1.2 29/08/2005
# CERNLIB/GRAFLIB re-defined
# Forces lf95 for crlibm
# Adds g95 option
# Version 1.3 05/09/2005
# CERNLIB only for SixTrack (not SixTrack_da); CERNGRAF dropped.
# The -naglib option now works for SixTrack_da
# Version 1.4 1/8/2008
# Gets the version and modification date from sixtrack.s
# Corrects the BOINC variable in the Makefile
# make_six clean now exits after the clean just like a make clean
# Version 1.5 11/07/2008
# Adds the deck nwrtbnl and the flags bpm and bnlelens
# Version 2.0 Major change in philosophy; to clarify and document
# all types of make.
# Version 2.1 Adds bignblz option for Frank.
#
# July, 2009. Updated all libraries etc to use Frank's cernlib and X11 libraries
# if they are not present (SLC5!). Also verified correct linking on 32/64 bit
# systems, SLC4 and SLC5.    A NIGHTMARE!!!
# Default: tilt tracking fast crlibm cernlib naglib -bpm -windows -da -collimat -bnlelens -cpss -boinc -cr
# and uses the Lahey-Fujitsu lf95 compiler 
# 12th August, 2009. Just changed print_map to print-map. Eric.
# Options:
# da => -tracking -cpss -boinc -collimat -cr +naglib
# collimat => -da -cr -boinc -cpss
# cpss => +cr -collimat -da -cernlib -naglib -boinc
# boinc => +cr +crlibm -collimat -da -cernlib -naglib -cpss
# bpm activates the collection of tracking data for sussix => basic SixTrack
# bnlelens activates the bnl electron lens options possibly => boinc, cr, crlibm
# nag => use f95 instead of LAHEY
# g77 => use g77
# g95 => use g95
# gfortran => use gfortran
show_options()
{
ons="The following selections are ON  :"
offs="The following selections are OFF :"
for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
do
  if test ${values[$i]} = "true"
  then
    ons="$ons ${options[$i]}"
  else
    offs="$offs ${options[$i]}"
  fi
done
echo "$ons"
echo "$offs"
}

#NOTA BENE! Definitions of cernlib and naglib are reversed
# in the sense that while a "" null value implies option is ON
# the reverse is true for cernlib and naglib
# The 0th option is not used
declare -a options
declare -a values
options=(junk tilt tracking fast crlibm windows   cernlib naglib da    collimat cpss  boinc cr    nag   g77   g95   gfortran bpm   bnlelens bignblz debug)
values=(junk  true true     true true   false     true    true   false false    false false false false false false false    false false    false   false)

sysname="`fs sysname`"
gfortran_lib=""
sversion=`grep 'data version' sixtrack.s` 
# get string between /....../
sversion=`echo $sversion | sed -e's/.*\/\(.*\)\//\1/'`
# remove the quotes
version=`echo $sversion | sed -e's/.\([0-9]*\).\([0-9]*\).\([0-9]*\)./v\1\2\3/'`
moddate=`grep 'data moddate' sixtrack.s` 
moddate=`echo $moddate | sed -e's/.*\/\(.*\)\//\1/'`
moddate=`echo $moddate | sed -e's/.\(.*\)./\1/'`

command_line=$*
# Now we have the default settings
# we have ON
tilt=""
tracking=""
fast=""
crlibm=""
cernlib="cernlib"
naglib="naglib"
# and we have OFF
windows="windows"
da="da"
collimat="collimat"
cpss="cpss"
boinc="boinc"
cr="cr"
nag="nag"
g77="g77"
g95="g95"
gfortran="gfortran"
bpm="bpm"
bnlelens="bnlelens"
bignblz="bignblz"
debug="debug"
while test $# != 0
do
  case $1 in
    clean) echo "Cleaning crlibm, astuce and dafor and removing ALL SixTrack_* directories."
           rm -f SixTrack
           rm -f *.o dafor astuce
           rm -f crlibm/crlibm.a crlibm/*.o
           rm -rf SixTrack_* 
           exit
    ;;
    -tilt) tilt="tilt"
           values[1]=false
    ;;
    -tracking) tracking="tracking"
           values[2]=false
    ;;
    -fast) fast="fast"
           values[3]=false
    ;;
    -crlibm) crlibm="crlibm"
           values[4]=false
    ;;
    -windows) windows="windows"
           values[5]=false
    ;;
    -cernlib) cernlib=""
           values[6]=false
    ;;
    -naglib) naglib=""
           values[7]=false
    ;;
    -da) da="da"
           values[8]=false
    ;;
    -collimat) collimat="collimat"
           values[9]=false
    ;;
    -cpss) cpss="cpss"
           values[10]=false
    ;;
    -boinc) boinc="boinc"
           values[11]=false
    ;;
    -cr) cr="cr"
           values[12]=false
    ;;
    -nag) nag="nag"
           values[13]=false
    ;;
    -g77) g77="g77"
           values[14]=false
    ;;
    -g95) g95="g95"
           values[15]=false
    ;;
    -gfortran) gfortran="gfortran"
           values[16]=false
    ;;
    -bpm) bpm="bpm"
          values[17]=false
    ;;
    -bnlelens) bnlelens="bnlelens"
          values[18]=false
    ;;
    -bignblz) bignblz="bignblz"
          values[19]=false
    ;;
    -debug) debug="debug"
          values[20]=false
    ;;


    +tilt) tilt=""
           values[1]=true 
    ;;
    +tracking) tracking=""
           values[2]=true
    ;;
    +fast) fast=""
           values[3]=true
    ;;
    +crlibm) crlibm=""
           values[4]=true
    ;;
    +windows) windows=""
           values[5]=true
    ;;
    +cernlib) cernlib="cernlib"
           values[6]=true
    ;;
    +naglib) naglib="naglib"
           values[7]=true
    ;;
    +da) da=""
           values[8]=true
    ;;
    +collimat) collimat=""
           values[9]=true
    ;;
    +cpss) cpss=""
           values[10]=true
    ;;
    +boinc) boinc=""
           values[11]=true
    ;;
    +cr) cr=""
           values[12]=true
    ;;
    +nag) nag=""
           values[13]=true
    ;;
    +g77) g77=""
           values[14]=true
    ;;
    +g95) g95=""
           values[15]=true
    ;;
    +gfortran) gfortran=""
           values[16]=true
    ;;
    +bpm) bpm=""
          values[17]=true
    ;;
    +bnlelens) bnlelens=""
          values[18]=true
    ;;
    +bignblz) bignblz=""
          values[19]=true
    ;;
    +debug) debug=""
          values[20]=true
    ;;


    tilt) tilt=""
           values[1]=true
    ;;
    tracking) tracking=""
           values[2]=true
    ;;
    fast) fast=""
           values[3]=true
    ;;
    crlibm) crlibm=""
           values[4]=true
    ;;
    windows) windows=""
           values[5]=true
    ;;
    cernlib) cernlib="cernlib"
           values[6]=true
    ;;
    naglib) naglib="naglib"
           values[7]=true
    ;;
    da) da=""
           values[8]=true
    ;;
    collimat) collimat=""
           values[9]=true
    ;;
    cpss) cpss=""
           values[10]=true
    ;;
    boinc) boinc=""
           values[11]=true
    ;;
    cr) cr=""
           values[12]=true
    ;;
    nag) nag=""
           values[13]=true
    ;;
    g77) g77=""
           values[14]=true
    ;;
    g95) g95=""
           values[15]=true
    ;;
    gfortran) gfortran=""
           values[16]=true
    ;;
    bpm) bpm=""
         values[17]=true
    ;;
    bnlelens) bnlelens=""
         values[18]=true
    ;;
    bignblz) bignblz=""
          values[19]=true
    ;;
    debug) debug=""
          values[20]=true
    ;;


    *) echo "Illegal option $1"
       exit 1
     ;;
  esac
  shift
done

# Here we do some checking for valid/invalid combinations 
nopts=0
sixtrackmode=""
for i in da collimat
do
  if test "$i" = ""
  then
    nopts=`expr ($nopts + 1)`
    sixtrackmode="$i"
  fi
done
if test "$nopts" -ge 2
then
  show_options
  echo "     INVALID options selected:"
  echo "     Select only one of da or collimat!"
  exit 1
elif test "$nopts" -eq 0
then
  tracking=""
  values[2]=true
fi
if test "$boinc" = ""
then
# BOINC includes the CPSS options
  cpss=""
  values[10]=true
fi
if test "$cpss" = ""
then
# force windows anyway
  windows=""
  values[5]=true
fi
if test "$da" = "" -o "$collimat" = ""
then
  if test "$cpss" = ""
  then
    show_options
    echo "     INVALID options selected:"
    echo "     BOINC/CPSS are for tracking only (NOT da nor collimat)"
    exit 1
  fi
  if test "$bpm" = ""
  then
    show_options
    echo "    INVALID options selected:"
    echo "    bpm is for tracking only and not for desktops!"
    exit 1
  fi
fi
if test "$da" = "da"
then
  naglib=""
  values[7]=false
fi
if test "$windows" = ""
then
  # We will build for windows (and Linux)
  # force windows, Lahey compiler, checkpoint/restart and crlibm, and NO cernlib 
  echo "Forcing Lahey lf95, checkpoint/restart and crlibm"
  windows=""
  values[5]=true
  cernlib=""
  values[6]=false
  crlibm=""
  values[4]=true
  cr=""
  nag="nag"
  values[13]=false
  values[12]=true
  g77="g77"
  values[14]=false
  g95="g95"
  values[15]=false
  gfortran="gfortran"
  values[16]=false
fi
# and make sure we use Lahey for crlibm
if test "$crlibm" = ""
then
  if test "$nag" = "" -o "$g77" = "" -o "$g95" = "" -o "$gfortran" = ""
  then
    show_options
    echo "     INVALID option selected:"
    echo "     crlibm => compilation must be done with Lahey lf95 !"
    exit 1
  fi
fi
# Set up compiler
if test "$nag" = ""
then
  export FC="f95"
  export FCF="-Wc,-m32 -Wl,-m32 -dusty -maxcontin=60 -dcfuns -ieee=full -g"
#  export FCF="-Wc,-m32 -Wl,-m32 -dusty -maxcontin=60 -dcfuns -ieee=full -g -C=undefined"
  export FCL="-Bstatic -m32"
  export NAGLIBC="-lg2c"
elif test "$g77" = ""
then
  export FC="g77"
  export FCF="-O -m32 -g -fno-second-underscore -funroll-loops"
  export FCL="-static -m32"
elif test "$g95" = ""
then
  export FC="g95"
  export FCF="-O -m32 -g -fno-second-underscore -funroll-loops"
  if test "$MACHTYPE" = "i586"
  then
    export FCL="-static -m32 -L/usr/lib/ -lc -L/usr/lib/gcc/i586-redhat-linux/4.4.0 -lgcc_eh"
  else
    export FCL="-static -m32"
  fi
elif test "$gfortran" = ""
then
  export FC="gfortran"
  export FCF="-O -m32 -g -fno-second-underscore -funroll-loops"
  export FCL="-static -m32"
else
  export FC="lf95"
  export FCF="--o1 --tp -Wa,--32"
  export FCL="-static -m32"
  if test "$MACHTYPE" = "x86_64"
  then
    ls -l /usr/lib/gcc/x86_64-redhat-linux/4.1.1/32/libgcc_eh.a > /dev/null 2>&1
    if test $? -ne 0
    then
      export FCL="-static -m32"
    else
      export FCL="-static -m32 -L/usr/lib/ -lc -L/usr/lib/gcc/x86_64-redhat-linux/3.4.6/32 -lgcc_eh"
    fi
  elif test "$MACHTYPE" = "i386"
  then
    ls -l /usr/lib/gcc/i386-redhat-linux/4.1.1/libgcc_eh.a > /dev/null 2>&1
    if test $? -ne 0
    then
      export FCL="-static -m32"
    else
      export FCL="-static -m32 -L/usr/lib/ -lc -L/usr/lib/gcc/i386-redhat-linux/4.1.1 -lgcc_eh"
    fi
  elif test "$MACHTYPE" = "i586"
  then
    export FCL="-static -m32 -L/usr/lib/ -lc -L/usr/lib/gcc/i586-redhat-linux/4.4.0 -lgcc_eh"
  else
    echo "Unknow MACHTYPE $MACHTYPE"
    exit 2
  fi 
fi

if test "$MACHTYPE" = "i586"
then
  export FCLMAP="$FCL"
else
  export FCLMAP="-Wl,--print-map $FCL"
fi

if test "$OSTYPE" = "darwin"
then
# allows running of sixtrack under Macinstosh System 10
  echo "MAC setup"
  export FCL="-m32"
  echo "Operating system: ",$OSTYPE
  export gfortran_lib="/sw/lib/gcc4.4/lib/libgfortran.a"
  if test "$da" != ""
  then
    export FCLMAP="-Wl,-map sixtrack.map $FCL"
  else
    export FCLMAP="-Wl,-map sixtrack_da.map $FCL"
  fi
else
  echo "Linux/windows setup for $sysname / WINDOWS 2000/XP"
fi

ename="SixTrack_"
if test "$crlibm" = ""
then
  ename=$ename"crlibm_"
fi
if test "$da" = ""
then
  ename=$ename"da_"
elif test "$collimat" = ""
then
  ename=$ename"coll_"
elif test "$bnlelens" = ""
then
  ename=$ename"bnl_"
elif test "$bpm" = ""
then
  ename=$ename"bpm_"
fi
ename=$ename$FC$version
if test "$boinc" = ""
then
  ename=$ename"_boinc"
elif test "$cpss" = ""
then
  ename=$ename"_cpss"
fi
if test "$debug" = ""
then
  ename=$ename"_debug"
fi
export ename

echo ""
echo "We are about to build $ename"
echo "last modified on $moddate"
echo "with the following options:"
echo ""
echo "Note that building for windows/boinc/cpss will also"
echo "build for Linux as a validity check."
echo ""
show_options
echo ""
echo "Hit any key to continue, or CTRL/C to exit."
read junk
# Make astuce and dafor (required for sixvefox and sixscfox)
make astuce
make dafor
# Create and initialise the build directory
mkdir -p "$ename"
cp Makefile $ename/Makefile
cd "$ename"
for dots in dabnew  lielib  sixtrack
do
  ln -sf ../${dots}.s ${dots}.s
done
# Use only necessary .ast (and .f later)
if test "$da" = ""
then
  export FORS='sixda sixsc sixscfox dabnew lielib'
else
  export FORS='track sixve sixvefox dabnews lielib'
fi
rm -f *.ast
for i in $FORS 
do
  cp ../ast_mask/$i.ast .
done
# Update the .ast flags based on options
for opt in "$crlibm" "$tilt" "$fast" "$bpm" "$collimat" "$bnlelens" "$cr" "$boinc" "$nag" "$bignblz" "$debug"
do
  if test "$opt" != ""
  then
    for i in `ls *.ast`
    do
      sed -e 's/\(^df .*\), *'$opt' *,\(.*\)/\1,\2/' \
          -e 's/\(^df .*\), *'$opt' *$/\1/' \
          -e 's/\(^df  *'$opt' *,\)\(.*\)/df \2/'  \
          -e 's/\(^df  *'$opt' *$\)/df/'         \
      $i > tmp$$
      mv tmp$$ $i
    done
  fi
done
# Delete unneeded decks from the .ast based on options
for opt in "$collimat" "$cr" "$cernlib" "$naglib" "$bnlelens"
do
  if test "$opt" != ""
  then
    case $opt in
    collimat) pattern="nwrtcoll"
    ;;
    bnlelens) pattern="nwrtbnl"
    ;;
    cr)       pattern="checkpt"
    ;;
    cernlib)  pattern="plotdumy"
    ;;
    naglib)   pattern="nagdumy"
    ;;
    esac
    for i in `ls *.ast`
    do
      sed -e '/^e  *'$pattern'/d' $i > tmp$$
      mv tmp$$ $i
    done
  fi
done
# Then generate the .f files
for i in $FORS
do
  ../astuce < $i.ast
  if test "$i" = "sixvefox" -o "$i" = "sixscfox" -o "$i" = "sixda"
  then
    ln -s -f $i"n.f" fort.1
    ../dafor
    rm -f fort.1 fort.3
    mv fort.2 $i"n.f"
  fi 
  if test -s $i.f
  then
    diff $i"n.f" $i.f > /dev/null
    if test $? -ne 0
    then
      mv $i"n.f" $i.f
    else
      rm $i"n.f"
    fi
  else
    mv $i"n.f" $i.f
  fi
done
# Now sort out cernlib
if test "$cernlib" != ""
then
  if test "$OSTYPE" = "linux"
  then
    ls -l /cern/pro/bin/cernlib > /dev/null 2>&1
    stat1=$?
    ls -l /usr/X11R6/lib/libX11.a > /dev/null 2>&1
    stat2=$?
    if test $stat1 -eq 0 -a $stat2 -eq 0
    then
      if test "$MACHTYPE" = "i386"
      then
        export CERNLIB="`cernlib -u graflib packlib_noshift kernlib_noshift` -L/usr/lib/gcc/i386-redhat-linux/3.4.6 -lg2c -L/usr/lib -lpthread"
      elif test "$MACHTYPE" = "x86_64"
      then
        export CERNLIB="`cernlib -u graflib packlib_noshift kernlib_noshift` -L/usr/lib/gcc/x86_64-redhat-linux/3.4.6/32 -lg2c -L/usr/lib -lpthread"
      else
        echo "Unknown MACHTYPE $MACHTYPE!!"
        exit 2
      fi
    else
      if test "$MACHTYPE" = "i386"
      then
        export CERNLIB="-L/afs/cern.ch/user/f/frs/public/lib32 -lgraflib -lgrafX11 -lpacklib_noshift -lkernlib_noshift -lX11 -L/usr/lib/gcc/i386-redhat-linux/3.4.6 -lg2c -L/usr/lib -lpthread"
      elif test "$MACHTYPE" = "i586"
      then
        export FCLMAP="-static -m32"
        export CERNLIB="-L/usr/lib/cernlib/2006/lib/ -lgraflib -lgrafX11 -lpacklib -lkernlib -L/usr/lib/gcc/i586-redhat-linux/3.4.6 -lg2c -L/usr/lib -lX11 -lxcb -lxcb-glx -lXau -lXdmcp -ldl" 
        export CERNLIB+=" -lpthread -L/usr/lib/gcc/i586-redhat-linux/4.4.0 -lgcc -lgcc_eh"
        if test "$gfortran" != ""
        then
          export CERNLIB+=" -lgfortran"
        fi
      elif test "$MACHTYPE" = "x86_64"
      then
        export CERNLIB="-L/afs/cern.ch/user/f/frs/public/lib32 -lgraflib -lgrafX11 -lpacklib_noshift -lkernlib_noshift -lX11 -L/usr/lib/gcc/x86_64-redhat-linux/3.4.6/32 -lg2c -L/usr/lib -lpthread"
      else
        echo "Unknown MACHTYPE $MACHTYPE!!"
      fi
    fi
  elif test "$OSTYPE" = "darwin"
  then
    export CERN_ROOT="/sw"
    export CERNLIB="`$CERN_ROOT/bin/cernlib -u graflib packlib kernlib` -lg2c -lpthread"
  else
    echo "Unrecognised OSTYPE $OSTYPE (not linux or darwin)"
    exit 2
  fi
fi
# and naglib
if test "$naglib" != ""
then
  if test "$sysname" = "Current sysname is 'i386_linux26'"
  then
    #SLC4 32 machine
    export NAGLIB="/afs/cern.ch/sw/nag/mark18/lnx/fllux18dg/libnag.a  -L/usr/lib/gcc/i386-redhat-linux/3.4.3 -lg2c -L/usr/lib -lpthread"
  elif test "$sysname" = "Current sysname is 'amd64_linux26'"
  then
    #SLC4 64 machine
    export NAGLIB="/afs/cern.ch/sw/nag/mark18/lnx/fllux18dg/libnag.a  -L/usr/lib/gcc/x86_64-redhat-linux/3.4.3/32 -lg2c -L/usr/lib -lpthread"
  else
    echo "NAGLIB cannot be found for your machine. SixTrack_da linking will fail!"
  fi
fi
# and crlibm
export CRLIBM=""
if test "$crlibm" = ""
then
  cd ../crlibm
# and fix the log logsix .c .h CVS problem until FRS returns
  ln -sf log.c logsix.c
  ln -sf log.h logsix.h
  make
  cd ../$ename
  export CRLIBM="../crlibm/crlibm.a"
fi

if test "$da" = ""
then
  # Fix up the Makefile
  sed -e's/%%SIXTRACK_DA%%/'$ename'/g' Makefile > tmp$$
  mv tmp$$ Makefile  
# remove an existing executable
  rm -f $ename
  make $ename
else
  export BOINC=""
  if test "$boinc" = ""
  then
    export BOINC="myboinc.o"
    cp ../myboinc.f .
  fi
  sed -e's/%%SIXTRACK%%/'$ename'/g' Makefile > tmp$$
  mv tmp$$ Makefile
  # We make for Linux now.because we are finished or as a verification 
  # before we set up for windows.
# remove an existing executable
  rm -f $ename
  make $ename
fi
echo "       "
echo "$0 : $command_line"
echo "tried to build $ename in the directory with the same name."
echo ""
show_options
echo ""
if test -s "$ename"
then
  echo "It appears to have completed successfully."
# and a link for Frank
  cd ..
  ln -sf $ename/$ename SixTrack
  cd $ename
else
  echo "It appears to have failed!!!"
  exit 2
fi
if test "$windows" = ""
then
  echo ""
  echo "Setting up crlibm and Makefile.bat for Windows"
  echo ""
# We [re-]copy myboinc.f even for CPSS
  cp ../myboinc.f .
  cp ../windows/Makefile.bat .
  sed -e's/%%SIXTRACK%%/'$ename'/g' Makefile.bat > tmp$$
  mv tmp$$ Makefile.bat
  if test "$boinc" = ""
  then
    # If  boinc i.e. not just CPSS or windows link in myboinc.obj
    sed -e's/%%BOINC%%/myboinc.obj/g' Makefile.bat > tmp$$
  else
    sed -e's/%%BOINC%%//g' Makefile.bat > tmp$$
  fi
  mv tmp$$ Makefile.bat
# and finally!!! perhaps get crlibm for windows
  mkdir -p crlibm
  cp ../windows/mkwindows .
  ./mkwindows
  echo "Now the $ename directory needs to be taken to Windows."
  echo "The Makefile.bat allows for checking boinc/cpss before"
  echo "really building the BOINC/CPSS version."
fi
